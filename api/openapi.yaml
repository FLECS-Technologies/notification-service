openapi: 3.0.0
info:
  title: Notis API Specification
  description: Notis API Specification
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  schemas:
    reason:
      type: object
      properties:
        reason:
          type: string
  responses:
    500:
      description: 'Internal Server Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reason'
    400:
      description: 'Bad Request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reason'
paths:
  '/schema/service_types/{service_type}/config':
    get:
      tags: [ 'Services' ]
      summary: 'Get the configuration schema of a service type'
      parameters:
        - name: service_type
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '404':
          description: 'Service type not found'
  '/default_service':
    get:
      tags: [ 'Services' ]
      summary: 'Get the default service and its type'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    type: string
                required: [ 'id', 'type' ]
        '404':
          description: 'No default service registered'
    delete:
      tags: [ 'Services' ]
      summary: 'Remove the reference to the default service'
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'No default service registered'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags: [ 'Services' ]
      summary: 'Set the default service'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
              required: [ 'id' ]
      responses:
        '200':
          description: 'Default service was replaced'
        '201':
          description: 'Default service was set'
        '404':
          description: 'Service not found'
        '500':
          $ref: '#/components/responses/500'
  '/services':
    get:
      tags: [ 'Services' ]
      summary: 'Get a list of all registered services, their type and the default service'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                description: 'A map of service ids to their type'
  '/services/{id}':
    put:
      tags: [ 'Services' ]
      summary: 'Create a new notification service, or replace an existing one'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                config:
                  type: object
              required: [ 'type', 'config' ]
      responses:
        '200':
          description: 'Service was replaced'
        '201':
          description: 'Service was created'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags: [ 'Services' ]
      summary: 'Get the notification service and their type'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  id:
                    type: string
                required: [ 'type', 'id' ]
        '404':
          description: 'Service not found'
    delete:
      tags: [ 'Services' ]
      summary: 'Delete the notification service'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'Service not found'
        '500':
          $ref: '#/components/responses/500'
  '/services/{id}/notifications':
    post:
      tags: [ 'Notifications' ]
      summary: 'Send notification via the notification service, may contain additional options'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  type: object
                  description: 'Optional options for the notification'
                title:
                  type: string
                  description: 'Short title of the notification'
                content:
                  type: string
                  description: 'Optional content of the notification'
              required: [ 'title' ]
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Service not found'
        '500':
          $ref: '#/components/responses/500'
  '/services/{id}/notifications/schema':
    get:
      tags: [ 'Services' ]
      summary: 'Get the schema for sending notifications via the notification service'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '404':
          description: 'Service not found'
  '/services/{id}/config':
    patch:
      tags: [ 'Services' ]
      summary: 'Manipulate the configuration of a notification service'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: 'Success'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: 'Service not found'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags: [ 'Services' ]
      summary: 'Get the configuration of a notification service'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '404':
          description: 'Service not found'
  '/services/{id}/config/schema':
    get:
      tags: [ 'Services' ]
      summary: 'Get the configuration schema of a notification service'
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
        - name: patch
          in: query
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '404':
          description: 'Service not found'
  '/notifications':
    post:
      tags: [ 'Notifications' ]
      summary: 'Send notification via the default service'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'Short title of the notification'
                content:
                  type: string
                  description: 'Optional content of the notification'
              required:
                - 'title'
              example:
                title: 'Export #1234 is ready'
                content: 'Your export #1234 was successfully created and can be downloaded'
      responses:
        '200':
          description: 'Success'
        '404':
          description: 'No default service found'
        '500':
          $ref: '#/components/responses/500'
